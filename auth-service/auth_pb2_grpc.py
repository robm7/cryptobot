# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import auth_pb2 as auth__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in auth_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KeyManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCurrentKey = channel.unary_unary(
                '/auth.KeyManagementService/GetCurrentKey',
                request_serializer=auth__pb2.GetKeyRequest.SerializeToString,
                response_deserializer=auth__pb2.KeyResponse.FromString,
                _registered_method=True)
        self.RotateKey = channel.unary_unary(
                '/auth.KeyManagementService/RotateKey',
                request_serializer=auth__pb2.RotateKeyRequest.SerializeToString,
                response_deserializer=auth__pb2.KeyResponse.FromString,
                _registered_method=True)
        self.ListKeys = channel.unary_unary(
                '/auth.KeyManagementService/ListKeys',
                request_serializer=auth__pb2.ListKeysRequest.SerializeToString,
                response_deserializer=auth__pb2.ListKeysResponse.FromString,
                _registered_method=True)
        self.GetExpiringKeys = channel.unary_unary(
                '/auth.KeyManagementService/GetExpiringKeys',
                request_serializer=auth__pb2.GetExpiringKeysRequest.SerializeToString,
                response_deserializer=auth__pb2.ListKeysResponse.FromString,
                _registered_method=True)
        self.RevokeKey = channel.unary_unary(
                '/auth.KeyManagementService/RevokeKey',
                request_serializer=auth__pb2.RevokeKeyRequest.SerializeToString,
                response_deserializer=auth__pb2.RevokeKeyResponse.FromString,
                _registered_method=True)


class KeyManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCurrentKey(self, request, context):
        """Gets the current active API key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RotateKey(self, request, context):
        """Rotates the current API key with a new one
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListKeys(self, request, context):
        """Lists all API keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpiringKeys(self, request, context):
        """Gets keys that will expire within specified days
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeKey(self, request, context):
        """Revokes a specific API key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCurrentKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentKey,
                    request_deserializer=auth__pb2.GetKeyRequest.FromString,
                    response_serializer=auth__pb2.KeyResponse.SerializeToString,
            ),
            'RotateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RotateKey,
                    request_deserializer=auth__pb2.RotateKeyRequest.FromString,
                    response_serializer=auth__pb2.KeyResponse.SerializeToString,
            ),
            'ListKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKeys,
                    request_deserializer=auth__pb2.ListKeysRequest.FromString,
                    response_serializer=auth__pb2.ListKeysResponse.SerializeToString,
            ),
            'GetExpiringKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExpiringKeys,
                    request_deserializer=auth__pb2.GetExpiringKeysRequest.FromString,
                    response_serializer=auth__pb2.ListKeysResponse.SerializeToString,
            ),
            'RevokeKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeKey,
                    request_deserializer=auth__pb2.RevokeKeyRequest.FromString,
                    response_serializer=auth__pb2.RevokeKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.KeyManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('auth.KeyManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KeyManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCurrentKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.KeyManagementService/GetCurrentKey',
            auth__pb2.GetKeyRequest.SerializeToString,
            auth__pb2.KeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RotateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.KeyManagementService/RotateKey',
            auth__pb2.RotateKeyRequest.SerializeToString,
            auth__pb2.KeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.KeyManagementService/ListKeys',
            auth__pb2.ListKeysRequest.SerializeToString,
            auth__pb2.ListKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExpiringKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.KeyManagementService/GetExpiringKeys',
            auth__pb2.GetExpiringKeysRequest.SerializeToString,
            auth__pb2.ListKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.KeyManagementService/RevokeKey',
            auth__pb2.RevokeKeyRequest.SerializeToString,
            auth__pb2.RevokeKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UserManagementServiceStub(object):
    """User Management Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/auth.UserManagementService/CreateUser',
                request_serializer=auth__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=auth__pb2.UserResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/auth.UserManagementService/GetUser',
                request_serializer=auth__pb2.GetUserRequest.SerializeToString,
                response_deserializer=auth__pb2.UserResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/auth.UserManagementService/UpdateUser',
                request_serializer=auth__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=auth__pb2.UserResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/auth.UserManagementService/DeleteUser',
                request_serializer=auth__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=auth__pb2.DeleteUserResponse.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/auth.UserManagementService/ListUsers',
                request_serializer=auth__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=auth__pb2.ListUsersResponse.FromString,
                _registered_method=True)
        self.SearchUsers = channel.unary_unary(
                '/auth.UserManagementService/SearchUsers',
                request_serializer=auth__pb2.SearchUsersRequest.SerializeToString,
                response_deserializer=auth__pb2.ListUsersResponse.FromString,
                _registered_method=True)
        self.CreateRole = channel.unary_unary(
                '/auth.UserManagementService/CreateRole',
                request_serializer=auth__pb2.CreateRoleRequest.SerializeToString,
                response_deserializer=auth__pb2.RoleResponse.FromString,
                _registered_method=True)
        self.AssignRole = channel.unary_unary(
                '/auth.UserManagementService/AssignRole',
                request_serializer=auth__pb2.AssignRoleRequest.SerializeToString,
                response_deserializer=auth__pb2.AssignRoleResponse.FromString,
                _registered_method=True)
        self.RevokeRole = channel.unary_unary(
                '/auth.UserManagementService/RevokeRole',
                request_serializer=auth__pb2.RevokeRoleRequest.SerializeToString,
                response_deserializer=auth__pb2.RevokeRoleResponse.FromString,
                _registered_method=True)
        self.ListRoles = channel.unary_unary(
                '/auth.UserManagementService/ListRoles',
                request_serializer=auth__pb2.ListRolesRequest.SerializeToString,
                response_deserializer=auth__pb2.ListRolesResponse.FromString,
                _registered_method=True)
        self.GetUserActivity = channel.unary_unary(
                '/auth.UserManagementService/GetUserActivity',
                request_serializer=auth__pb2.GetUserActivityRequest.SerializeToString,
                response_deserializer=auth__pb2.UserActivityResponse.FromString,
                _registered_method=True)


class UserManagementServiceServicer(object):
    """User Management Service
    """

    def CreateUser(self, request, context):
        """User operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRole(self, request, context):
        """Role operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserActivity(self, request, context):
        """Activity logging
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=auth__pb2.CreateUserRequest.FromString,
                    response_serializer=auth__pb2.UserResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=auth__pb2.GetUserRequest.FromString,
                    response_serializer=auth__pb2.UserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=auth__pb2.UpdateUserRequest.FromString,
                    response_serializer=auth__pb2.UserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=auth__pb2.DeleteUserRequest.FromString,
                    response_serializer=auth__pb2.DeleteUserResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=auth__pb2.ListUsersRequest.FromString,
                    response_serializer=auth__pb2.ListUsersResponse.SerializeToString,
            ),
            'SearchUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchUsers,
                    request_deserializer=auth__pb2.SearchUsersRequest.FromString,
                    response_serializer=auth__pb2.ListUsersResponse.SerializeToString,
            ),
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=auth__pb2.CreateRoleRequest.FromString,
                    response_serializer=auth__pb2.RoleResponse.SerializeToString,
            ),
            'AssignRole': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignRole,
                    request_deserializer=auth__pb2.AssignRoleRequest.FromString,
                    response_serializer=auth__pb2.AssignRoleResponse.SerializeToString,
            ),
            'RevokeRole': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeRole,
                    request_deserializer=auth__pb2.RevokeRoleRequest.FromString,
                    response_serializer=auth__pb2.RevokeRoleResponse.SerializeToString,
            ),
            'ListRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoles,
                    request_deserializer=auth__pb2.ListRolesRequest.FromString,
                    response_serializer=auth__pb2.ListRolesResponse.SerializeToString,
            ),
            'GetUserActivity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserActivity,
                    request_deserializer=auth__pb2.GetUserActivityRequest.FromString,
                    response_serializer=auth__pb2.UserActivityResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.UserManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('auth.UserManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserManagementService(object):
    """User Management Service
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/CreateUser',
            auth__pb2.CreateUserRequest.SerializeToString,
            auth__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/GetUser',
            auth__pb2.GetUserRequest.SerializeToString,
            auth__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/UpdateUser',
            auth__pb2.UpdateUserRequest.SerializeToString,
            auth__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/DeleteUser',
            auth__pb2.DeleteUserRequest.SerializeToString,
            auth__pb2.DeleteUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/ListUsers',
            auth__pb2.ListUsersRequest.SerializeToString,
            auth__pb2.ListUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/SearchUsers',
            auth__pb2.SearchUsersRequest.SerializeToString,
            auth__pb2.ListUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/CreateRole',
            auth__pb2.CreateRoleRequest.SerializeToString,
            auth__pb2.RoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/AssignRole',
            auth__pb2.AssignRoleRequest.SerializeToString,
            auth__pb2.AssignRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/RevokeRole',
            auth__pb2.RevokeRoleRequest.SerializeToString,
            auth__pb2.RevokeRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/ListRoles',
            auth__pb2.ListRolesRequest.SerializeToString,
            auth__pb2.ListRolesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserActivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.UserManagementService/GetUserActivity',
            auth__pb2.GetUserActivityRequest.SerializeToString,
            auth__pb2.UserActivityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
