apiVersion: apps/v1
kind: Deployment
metadata:
  name: cryptobot-deployment
  labels:
    app: cryptobot
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cryptobot
  template:
    metadata:
      labels:
        app: cryptobot
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: cryptobot
        image: python:3.9-slim-buster
        command: ["python", "trade/main.py"]
        securityContext:
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: app-volume
          mountPath: /app
      volumes:
      - name: app-volume
        configMap:
          name: app-config
---
apiVersion: v1
kind: Service
metadata:
  name: cryptobot-service
spec:
  selector:
    app: cryptobot
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  trade/main.py: |
    import logging
    from fastapi import FastAPI, Request
    from fastapi.middleware.cors import CORSMiddleware
    from routers import trades
    from services.data.logging_middleware import RequestLoggingMiddleware

    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    app = FastAPI(title="Trade Execution Service")

    # Add logging middleware
    app.add_middleware(RequestLoggingMiddleware)

    # CORS Configuration
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # Include routers
    app.include_router(trades.router, prefix="/api/trades")

    if __name__ == "__main__":
        import uvicorn
        uvicorn.run(app, host="0.0.0.0", port=8000)
  trade/engine.py: |
    from enum import Enum, auto
    from dataclasses import dataclass
    from typing import Optional, Callable, Type, Dict, List, Tuple, Union
    import asyncio
    import logging
    from datetime import datetime
    from decimal import Decimal
    from .utils.exchange import ExchangeInterface
    from .utils.retry import async_retry
    from .utils.websocket import BinanceWebSocket
    from .services.risk_manager import RiskManager
    from .services.portfolio_manager import PortfolioManager
    from .utils.metrics import MetricsCollector
    from .utils.alerting import AlertManager
    from .config.risk_config import risk_config

    logger = logging.getLogger(__name__)

    class OrderStatus(Enum):
        PENDING = auto()
        OPEN = auto()
        PARTIALLY_FILLED = auto()
        FILLED = auto()
        CANCELLED = auto()
        REJECTED = auto()

    @dataclass
    class Order:
        id: str
        symbol: str
        side: str  # 'buy' or 'sell'
        type: str  # 'limit', 'market', etc
        amount: float
        price: Optional[float] = None
        status: OrderStatus = OrderStatus.PENDING
        created_at: datetime = datetime.now()
        updated_at: datetime = datetime.now()

    class TradingEngine:
        def __init__(self, exchange: Type[ExchangeInterface], api_key: str, api_secret: str):
            self.orders = {}
            self._order_listeners = []
            self._price_listeners = []
            self.exchange = exchange(api_key, api_secret)
            self.websocket = BinanceWebSocket()
            self._current_prices: Dict[str, Decimal] = {}
            self._order_books: Dict[str, Dict[str, Dict[Decimal, Decimal]]] = {}
            self._depth_listeners = []

            # Initialize portfolio manager
            self.portfolio_manager = PortfolioManager()

            # Initialize metrics collector
            self.metrics_collector = MetricsCollector()

            # Initialize risk manager
            self.risk_manager = RiskManager(self.portfolio_manager, self.metrics_collector)

            # Initialize alert manager
            self.alert_manager = AlertManager()

            # Risk monitoring flag
            self.risk_monitoring_enabled = True

        @async_retry(max_retries=3, delay=1)
        async def start(self):
            """Start WebSocket connections and risk monitoring"""
            # Start WebSocket connections
            await self.websocket.connect()
            await self._setup_market_data()
            listen_key = await self.exchange.get_listen_key()
            await self.websocket.subscribe_user_data(listen_key)

            # Register execution handler
            async def handle_execution(msg):
                order_id = msg['order_id']
                status = {
                    'NEW': OrderStatus.OPEN,
                    'PARTIALLY_FILLED': OrderStatus.PARTIALLY_FILLED,
                    'FILLED': OrderStatus.FILLED,
                    'CANCELED': OrderStatus.CANCELLED,
                    'REJECTED': OrderStatus.REJECTED
                }.get(msg['status'], OrderStatus.PENDING)

                if order_id in self.orders:
                    await self._update_order_status(order_id, status)

                    # Update portfolio if order is filled
                    if status == OrderStatus.FILLED and 'price' in msg and 'quantity' in msg:
                        symbol = self.orders[order_id].symbol
                        side = self.orders[order_id].side
                        price = Decimal(str(msg['price']))
                        quantity = Decimal(str(msg['quantity']))

                        # Adjust quantity sign based on side
                        if side == 'sell':
                            quantity = -quantity

                        # Update portfolio
                        await self.portfolio_manager.add_position(symbol, quantity, price)

                        # Record metrics
                        self.metrics_collector.record_counter(f"trades.count.{symbol}", 1)
                        self.metrics_collector.record_counter("trades.count.total", 1)

            self.websocket._callbacks['execution'] = handle_execution

            # Start risk monitoring
            if self.risk_monitoring_enabled:
                await self.risk_manager.start_monitoring()

            # Start metrics exporting
            await self.metrics_collector.start_exporting()

            logger.info("Trading engine started with risk management integration")

        async def _setup_market_data(self):
            """Subscribe to relevant market data streams"""
            async def handle_ticker(msg):
                data = msg['data']
                symbol = data['s']
                price = Decimal(data['c'])
                self._current_prices[symbol] = price

                # Update portfolio position prices
                if symbol in self.portfolio_manager.positions:
                    await self.portfolio_manager.update_position_price(symbol, price)

                # Update circuit breakers
                if symbol in self.risk_manager.circuit_breakers:
                    self.risk_manager.circuit_breakers[symbol].update_price(price)

                # Notify price listeners
                for callback in self._price_listeners:
                    await callback(symbol, price)

            async def handle_depth(msg):
                symbol = msg['symbol']
                self._order_books[symbol] = {
                    'bids': msg['bids'],
                    'asks': msg['asks']
                }
                for callback in self._depth_listeners:
                    await callback(symbol, msg['bids'], msg['asks'])

            await self.websocket.subscribe(
                f"!ticker@arr",
                handle_ticker
            )
            await self.websocket.subscribe_depth("BTCUSDT")

            # Register circuit breakers for major symbols
            major_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
            for symbol in major_symbols:
                self.risk_manager.register_circuit_breaker(symbol)

        def add_price_listener(self, callback: Callable[[str, Decimal], None]):
            """Register callback for price updates"""
            self._price_listeners.append(callback)

        def add_depth_listener(self, callback: Callable[[str, Dict[Decimal, Decimal], Dict[Decimal, Decimal]], None]):
            """Register callback for price updates"""
            self._price_listeners.append(callback)

        async def place_order(self, order: Order) -> Order:
            """Place a new order and track its lifecycle"""
            # Validate order against risk limits
            account_equity = await self.portfolio_manager.get_account_equity()
            is_valid, reason = await self.risk_manager.validate_order(order, account_equity)

            if not is_valid:
                logger.warning(f"Order rejected by risk manager: {reason}")
                order.status = OrderStatus.REJECTED

                # Send alert
                self.alert_manager.send_alert(
                    "Order Rejected",
                    f"Order for {order.symbol} rejected: {reason}",
                    level="warning"
                )

                # Record metric
                self.metrics_collector.record_counter("orders.rejected", 1)

                # Raise exception
                raise ValueError(f"Order rejected by risk manager: {reason}")

            # Track order
            self.orders[order.id] = order

            try:
                # Place order on exchange
                exchange_order = await self.exchange.create_order(
                    symbol=order.symbol,
                    side=order.side,
                    type=order.type,
                    amount=Decimal(str(order.amount)),
                    price=Decimal(str(order.price)) if order.price else None
                )

                # Update order with exchange ID
                order.id = exchange_order['orderId']
                await self._update_order_status(order.id, OrderStatus.OPEN)

                # Record metric
                self.metrics_collector.record_counter("orders.placed", 1)

                return order
            except Exception as e:
                # Handle failure
                await self._update_order_status(order.id, OrderStatus.REJECTED)

                # Record metric
                self.metrics_collector.record_counter("orders.failed", 1)

                # Log error
                logger.error(f"Order placement failed: {e}")

                raise

        async def cancel_order(self, order_id: str) -> bool:
            """Cancel an existing order"""
            if order_id in self.orders:
                await self._update_order_status(order_id, OrderStatus.CANCELLED)
                return True
            return False

        def add_order_listener(self, callback: Callable[[Order], None]):
            """Register callback for order updates"""
            self._order_listeners.append(callback)

        async def _update_order_status(self, order_id: str, status: OrderStatus):
            """Internal method to update order status"""
            order = self.orders[order_id]
            order.status = status
            order.updated_at = datetime.now()

            # Notify listeners
            for callback in self._order_listeners:
                await callback(order)

        async def stop(self):
            """Stop the trading engine and all services"""
            # Stop risk monitoring
            await self.risk_manager.stop_monitoring()

            # Stop metrics exporting
            await self.metrics_collector.stop_exporting()

            # Close WebSocket connections
            await self.websocket.close()

            logger.info("Trading engine stopped")

        async def get_risk_report(self) -> Dict:
            """Get comprehensive risk report"""
            return await self.risk_manager.get_risk_report()

        async def get_performance_metrics(self) -> Dict:
            """Get performance metrics"""
            return self.portfolio_manager.get_performance_metrics()

        def set_risk_limit(self, limit_name: str, value: Union[Decimal, int, bool]):
            """
            Set a risk limit parameter.

            Args:
                limit_name: Name of the risk limit parameter
                value: New value for the parameter
            """
            if hasattr(risk_config, limit_name.upper()):
                setattr(risk_config, limit_name.upper(), value)
                logger.info(f"Risk limit {limit_name} set to {value}")
            else:
                logger.warning(f"Unknown risk limit parameter: {limit_name}")

        async def calculate_position_size(self, symbol: str, risk_percentage: Optional[Decimal] = None,
                                       stop_loss_pct: Optional[Decimal] = None) -> Decimal:
            """
            Calculate optimal position size based on risk parameters.

            Args:
                symbol: Trading pair symbol
                risk_percentage: Percentage of account to risk (overrides default)
                stop_loss_pct: Stop loss percentage (if applicable)

            Returns:
                Decimal: Calculated position size in quote currency
            """
            account_equity = await self.portfolio_manager.get_account_equity()

            return await self.risk_manager.calculate_position_size(
                symbol,
                account_equity,
                risk_percentage=risk_percentage,
                stop_loss_pct=stop_loss_pct
            )

    @api_blueprint.route('/backtest', methods=['POST'])
    @jwt_required()
    @handle_errors
    def run_backtest():
        """Run a backtest for a strategy"""
        data = request.json
        current_user = get_jwt_identity()

        required_fields = ['strategy_id', 'symbol', 'timeframe', 'start_date', 'end_date', 'initial_capital']
        optional_fields = ['risk_per_trade_pct', 'max_drawdown_pct', 'position_size_pct'] # New optional fields

        if not all(k in data for k in required_fields):
            return error_response("Missing required fields", 400)

        try:
            strategy_id = int(data['strategy_id'])
            initial_capital = float(data['initial_capital'])
            # Validate optional risk parameters if provided
            risk_per_trade_pct = float(data.get('risk_per_trade_pct', 0.02)) # Default 2%
            max_drawdown_pct = float(data.get('max_drawdown_pct', 0.20))   # Default 20%
            position_size_pct = float(data.get('position_size_pct', 1.0))   # Default 100%

            if not (0 < risk_per_trade_pct <= 1):
                return error_response("Invalid risk_per_trade_pct (must be between 0 and 1)", 400)
            if not (0 < max_drawdown_pct <= 1):
                return error_response("Invalid max_drawdown_pct (must be between 0 and 1)", 400)
            if not (0 < position_size_pct <= 1):
                 return error_response("Invalid position_size_pct (must be between 0 and 1)", 400)

        except (ValueError, TypeError) as e:
            api_blueprint.logger.error(f"Invalid input type for backtest parameters: {e}")
            return error_response("Invalid input type for numeric fields (strategy_id, initial_capital, risk params)", 400)

        try:
            strategy_record = Strategy.query.filter_by(id=strategy_id).first()
            if not strategy_record:
                return error_response("Strategy not found", 404)

            if strategy_record.user_id != current_user:
                return error_response("Forbidden - strategy belongs to another user", 403)

            # Instantiate the actual strategy object
            strategy_instance = StrategyFactory.create_strategy(
  trade/engine.py: |
    # Paste the content of trade/engine.py here