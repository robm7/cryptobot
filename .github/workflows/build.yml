name: Build Executables

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - release/*
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (release or debug)'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyinstaller
      
      - name: Run tests
        run: |
          pytest tests/ -v
      
      - name: Build executable
        run: |
          $buildType = "${{ github.event.inputs.build_type }}"
          if ($buildType -eq "") {
            if ("${{ github.ref }}".StartsWith("refs/tags/v")) {
              $buildType = "release"
            } else {
              $buildType = "debug"
            }
          }
          
          if ($buildType -eq "release") {
            .\scripts\build_windows.ps1 -Clean -Optimize
          } else {
            .\scripts\build_windows.ps1 -Clean
          }
      
      - name: Get version
        id: get_version
        run: |
          $version = "dev"
          if ("${{ github.ref }}".StartsWith("refs/tags/v")) {
            $version = "${{ github.ref }}".Substring(11)
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
      
      - name: Rename artifacts
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          Move-Item -Path "dist\cryptobot-windows.zip" -Destination "dist\cryptobot-windows-$version.zip"
          Move-Item -Path "dist\cryptobot_onefile.exe" -Destination "dist\cryptobot-windows-$version.exe"
      
      - name: Upload directory-based executable
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-windows-${{ steps.get_version.outputs.VERSION }}
          path: dist/cryptobot/
      
      - name: Upload ZIP archive
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-windows-${{ steps.get_version.outputs.VERSION }}-zip
          path: dist/cryptobot-windows-${{ steps.get_version.outputs.VERSION }}.zip
      
      - name: Upload single-file executable
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-windows-${{ steps.get_version.outputs.VERSION }}-exe
          path: dist/cryptobot-windows-${{ steps.get_version.outputs.VERSION }}.exe
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            dist/cryptobot-windows-${{ steps.get_version.outputs.VERSION }}.zip
            dist/cryptobot-windows-${{ steps.get_version.outputs.VERSION }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyinstaller
          sudo apt-get update
          sudo apt-get install -y upx
      
      - name: Run tests
        run: |
          pytest tests/ -v
      
      - name: Build executable
        run: |
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
          if [ -z "$BUILD_TYPE" ]; then
            if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              BUILD_TYPE="release"
            else
              BUILD_TYPE="debug"
            fi
          fi
          
          if [ "$BUILD_TYPE" == "release" ]; then
            chmod +x scripts/build_linux.sh
            ./scripts/build_linux.sh --clean --optimize
          else
            chmod +x scripts/build_linux.sh
            ./scripts/build_linux.sh --clean
          fi
      
      - name: Get version
        id: get_version
        run: |
          VERSION="dev"
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed 's|refs/tags/v||')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Rename artifacts
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          mv dist/cryptobot-linux.tar.gz dist/cryptobot-linux-$VERSION.tar.gz
          mv dist/cryptobot_onefile dist/cryptobot-linux-$VERSION
      
      - name: Upload directory-based executable
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-linux-${{ steps.get_version.outputs.VERSION }}
          path: dist/cryptobot/
      
      - name: Upload tarball archive
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-linux-${{ steps.get_version.outputs.VERSION }}-tar
          path: dist/cryptobot-linux-${{ steps.get_version.outputs.VERSION }}.tar.gz
      
      - name: Upload single-file executable
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-linux-${{ steps.get_version.outputs.VERSION }}-bin
          path: dist/cryptobot-linux-${{ steps.get_version.outputs.VERSION }}
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            dist/cryptobot-linux-${{ steps.get_version.outputs.VERSION }}.tar.gz
            dist/cryptobot-linux-${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    needs: [build-windows, build-linux]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s (%h)" > CHANGELOG.md
          else
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD > CHANGELOG.md
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Cryptobot v${{ steps.get_version.outputs.VERSION }}
          body: |
            # Cryptobot v${{ steps.get_version.outputs.VERSION }}
            
            ## Changes
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Downloads
            
            ### Windows
            * [Windows Installer (EXE)](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/cryptobot-windows-${{ steps.get_version.outputs.VERSION }}.exe)
            * [Windows ZIP Archive](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/cryptobot-windows-${{ steps.get_version.outputs.VERSION }}.zip)
            
            ### Linux
            * [Linux Binary](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/cryptobot-linux-${{ steps.get_version.outputs.VERSION }})
            * [Linux Tarball](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/cryptobot-linux-${{ steps.get_version.outputs.VERSION }}.tar.gz)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}