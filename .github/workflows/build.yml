name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyinstaller
      
      - name: Build Windows executable
        run: |
          powershell -ExecutionPolicy Bypass -File .\scripts\build_windows.ps1 -Clean -Optimize
      
      - name: Test Windows executable
        run: |
          python scripts/test_distribution.py --platform windows
      
      - name: Upload Windows executable
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-windows
          path: |
            dist/cryptobot-windows.zip
            dist/cryptobot_onefile.exe
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyinstaller
          sudo apt-get update
          sudo apt-get install -y upx
      
      - name: Build Linux executable
        run: |
          chmod +x scripts/build_linux.sh
          ./scripts/build_linux.sh --clean --optimize
      
      - name: Test Linux executable
        run: |
          python scripts/test_distribution.py --platform linux
      
      - name: Upload Linux executable
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-linux
          path: |
            dist/cryptobot-linux.tar.gz
            dist/cryptobot_onefile
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyinstaller py2app
          brew install upx create-dmg
      
      - name: Build macOS application
        run: |
          chmod +x scripts/build_macos_app.sh
          ./scripts/build_macos_app.sh --clean --optimize
      
      - name: Build macOS DMG
        run: |
          chmod +x scripts/build_macos_dmg.sh
          ./scripts/build_macos_dmg.sh
      
      - name: Test macOS application
        run: |
          python scripts/test_distribution.py --platform macos
      
      - name: Upload macOS application
        uses: actions/upload-artifact@v3
        with:
          name: cryptobot-macos
          path: |
            dist/CryptoBot.dmg
          if-no-files-found: error

  create-release:
    needs: [build-windows, build-linux, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/cryptobot-windows/cryptobot-windows.zip
            artifacts/cryptobot-windows/cryptobot_onefile.exe
            artifacts/cryptobot-linux/cryptobot-linux.tar.gz
            artifacts/cryptobot-linux/cryptobot_onefile
            artifacts/cryptobot-macos/CryptoBot.dmg
          draft: false
          prerelease: false
          generate_release_notes: true