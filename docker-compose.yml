services:
  kong-database:
    image: postgres:13-alpine
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5433:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  kong-migrations:
    image: kong:3.4
    container_name: kong-migrations
    command: kong migrations bootstrap -v
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      kong-database:
        condition: service_healthy
    restart: on-failure

  kong:
    image: kong:3.4
    container_name: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  redis:
    image: redis:alpine
    container_name: cryptobot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:13-alpine
    container_name: cryptobot_postgres
    environment:
      POSTGRES_USER: cryptobot
      POSTGRES_PASSWORD: cryptobot123
      POSTGRES_DB: cryptobot
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptobot"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  auth-service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: cryptobot_auth
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://cryptobot:cryptobot123@postgres:5432/cryptobot
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Kafka cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # TimescaleDB for historical data
  timescale:
    image: timescale/timescaledb:2.9.0-pg14
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cryptobot
    volumes:
      - timescale_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # Data services
  data-collector:
    build:
      context: .
      dockerfile: services/data/Dockerfile
    command: python -m services.data.collector --exchange binance --symbols BTCUSDT,ETHUSDT
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EXCHANGE_API_KEY: ${BINANCE_API_KEY}
      EXCHANGE_API_SECRET: ${BINANCE_SECRET_KEY}
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - "8000:8000"  # Metrics

  ohlcv-processor:
    build:
      context: .
      dockerfile: services/stream/Dockerfile
    command: python -m services.stream.processor
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - "8001:8001"  # Metrics

  websocket-gateway:
    build:
      context: .
      dockerfile: services/data/Dockerfile
    command: python -m services.data.realtime
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - "8765:8765"  # WebSocket
      - "8002:8002"  # Metrics

  historical-loader:
    build:
      context: .
      dockerfile: services/data/Dockerfile
    command: python -m services.data.historical
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      TIMESCALE_HOST: timescale
      TIMESCALE_PASSWORD: password
    depends_on:
      kafka:
        condition: service_healthy
      timescale:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - "8003:8003"  # Metrics

  strategy-service:
    build:
      context: ./strategy
      dockerfile: Dockerfile
    container_name: cryptobot_strategy
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://cryptobot:cryptobot123@postgres:5432/cryptobot
    depends_on:
      - postgres
      - auth-service
      - data-collector
      - ohlcv-processor
      - websocket-gateway
      - historical-loader
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  backtest-service:
    build:
      context: ./backtest
      dockerfile: Dockerfile
    container_name: cryptobot_backtest
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://cryptobot:cryptobot123@postgres:5432/cryptobot
      - MAX_CONCURRENT_BACKTESTS=5
    depends_on:
      - postgres
      - auth-service
      - strategy-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  trade-service:
    build:
      context: ./trade
      dockerfile: Dockerfile
    container_name: cryptobot_trade
    ports:
      - "8004:8004"
    environment:
      - EXCHANGE_API_KEY=${BINANCE_API_KEY}
      - EXCHANGE_API_SECRET=${BINANCE_SECRET_KEY}
      - EXCHANGE_PASSPHRASE=${EXCHANGE_PASSPHRASE}
      - EXCHANGE_SANDBOX=${EXCHANGE_SANDBOX}
    depends_on:
      - postgres
      - auth-service
      - strategy-service
      - data-collector
      - ohlcv-processor
      - websocket-gateway
      - historical-loader
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  exchange-gateway:
    build:
      context: ./services/mcp/exchange-gateway
      dockerfile: Dockerfile
    container_name: cryptobot_exchange_gateway
    ports:
      - "8005:8000"  # Mapped to internal port 8000
    environment:
      - EXCHANGE_API_KEY=${BINANCE_API_KEY}
      - EXCHANGE_API_SECRET=${BINANCE_SECRET_KEY}
    depends_on:
      - postgres
      - auth-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  dashboard-service:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: cryptobot_dashboard
    ports:
      - "3000:3000"
    environment:
      - API_BASE_URL=http://kong:8000
      - WS_URL=ws://kong:8000/trades
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - auth-service
      - data-service
      - strategy-service
      - backtest-service
      - trade-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  paper-trading-service:
    build:
      context: ./services/mcp/paper-trading
      dockerfile: Dockerfile
    container_name: cryptobot_paper_trading
    ports:
      - "8006:8000"  # Mapped to internal port 8000
    environment:
      - PAPER_TRADING_ENABLED=true
    depends_on:
      - postgres
      - auth-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  redis_data:
  postgres_data:
  kong_data:
  timescale_data: