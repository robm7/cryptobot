{
  "openapi": "3.1.0",
  "info": {
    "title": "Backtest Service",
    "version": "0.1.0"
  },
  "paths": {
    "/api/backtest/optimize": {
      "post": {
        "tags": [
          "backtest"
        ],
        "summary": "Optimize Strategy Parameters",
        "description": "Run parameter optimization for a given strategy.\nIterates through parameter combinations, simulates backtests, and returns results.",
        "operationId": "optimize_strategy_parameters_api_backtest_optimize_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/backtest/start": {
      "post": {
        "tags": [
          "backtest"
        ],
        "summary": "Start Backtest",
        "description": "Start a new backtest",
        "operationId": "start_backtest_api_backtest_start_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BacktestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/backtest/status/{backtest_id_str}": {
      "get": {
        "tags": [
          "backtest"
        ],
        "summary": "Get Backtest Status",
        "description": "Get status of a backtest",
        "operationId": "get_backtest_status_api_backtest_status__backtest_id_str__get",
        "parameters": [
          {
            "name": "backtest_id_str",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id Str"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/backtest/results/{backtest_id_str}": {
      "get": {
        "tags": [
          "backtest"
        ],
        "summary": "Get Backtest Results",
        "description": "Get results of a completed backtest",
        "operationId": "get_backtest_results_api_backtest_results__backtest_id_str__get",
        "parameters": [
          {
            "name": "backtest_id_str",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id Str"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/backtest/performance/{backtest_id_str}": {
      "get": {
        "tags": [
          "backtest"
        ],
        "summary": "Get Performance Metrics",
        "description": "Get performance metrics for a completed backtest",
        "operationId": "get_performance_metrics_api_backtest_performance__backtest_id_str__get",
        "parameters": [
          {
            "name": "backtest_id_str",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id Str"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceMetrics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/backtest/walkforward": {
      "post": {
        "tags": [
          "backtest"
        ],
        "summary": "Run Walk Forward Analysis",
        "description": "Run walk-forward analysis for a given strategy.\nDivides data into folds, optimizes in-sample, tests out-of-sample.",
        "operationId": "run_walk_forward_analysis_api_backtest_walkforward_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalkForwardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalkForwardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BacktestRequest": {
        "properties": {
          "strategy": {
            "type": "string",
            "title": "Strategy"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "timeframe": {
            "type": "string",
            "title": "Timeframe"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "start_date": {
            "type": "string",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "title": "End Date"
          }
        },
        "type": "object",
        "required": [
          "strategy",
          "parameters",
          "timeframe",
          "symbol",
          "start_date",
          "end_date"
        ],
        "title": "BacktestRequest",
        "description": "Request schema for starting a new backtest"
      },
      "BacktestResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "strategy": {
            "type": "string",
            "title": "Strategy"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "start_time": {
            "type": "string",
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "results": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "id",
          "strategy",
          "parameters",
          "start_time",
          "status"
        ],
        "title": "BacktestResult",
        "description": "Response schema for backtest results"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "OptimizationRequest": {
        "properties": {
          "strategy_name": {
            "type": "string",
            "title": "Strategy Name"
          },
          "parameter_ranges": {
            "items": {
              "$ref": "#/components/schemas/ParameterRange"
            },
            "type": "array",
            "title": "Parameter Ranges"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "timeframe": {
            "type": "string",
            "title": "Timeframe"
          },
          "start_date": {
            "type": "string",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "title": "End Date"
          }
        },
        "type": "object",
        "required": [
          "strategy_name",
          "parameter_ranges",
          "symbol",
          "timeframe",
          "start_date",
          "end_date"
        ],
        "title": "OptimizationRequest",
        "description": "Request schema for starting a parameter optimization task."
      },
      "OptimizationResponse": {
        "properties": {
          "optimization_id": {
            "type": "string",
            "title": "Optimization Id"
          },
          "strategy_name": {
            "type": "string",
            "title": "Strategy Name"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "timeframe": {
            "type": "string",
            "title": "Timeframe"
          },
          "start_date": {
            "type": "string",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "title": "End Date"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/OptimizationRunResult"
            },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "optimization_id",
          "strategy_name",
          "symbol",
          "timeframe",
          "start_date",
          "end_date",
          "results"
        ],
        "title": "OptimizationResponse",
        "description": "Response schema for the parameter optimization task, containing results for all combinations."
      },
      "OptimizationRunResult": {
        "properties": {
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "metrics": {
            "$ref": "#/components/schemas/PerformanceMetrics"
          }
        },
        "type": "object",
        "required": [
          "parameters",
          "metrics"
        ],
        "title": "OptimizationRunResult",
        "description": "Stores the parameters and performance metrics for a single backtest run within an optimization task."
      },
      "ParameterRange": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "start_value": {
            "type": "number",
            "title": "Start Value"
          },
          "end_value": {
            "type": "number",
            "title": "End Value"
          },
          "step": {
            "type": "number",
            "title": "Step"
          }
        },
        "type": "object",
        "required": [
          "name",
          "start_value",
          "end_value",
          "step"
        ],
        "title": "ParameterRange",
        "description": "Defines the range for a single parameter to be optimized."
      },
      "PerformanceMetrics": {
        "properties": {
          "profit": {
            "type": "number",
            "title": "Profit"
          },
          "max_drawdown": {
            "type": "number",
            "title": "Max Drawdown"
          },
          "sharpe_ratio": {
            "type": "number",
            "title": "Sharpe Ratio"
          },
          "win_rate": {
            "type": "number",
            "title": "Win Rate"
          },
          "total_trades": {
            "type": "integer",
            "title": "Total Trades"
          },
          "profit_factor": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profit Factor"
          },
          "sortino_ratio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sortino Ratio"
          },
          "calmar_ratio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Calmar Ratio"
          },
          "downside_volatility": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Downside Volatility"
          },
          "ulcer_index": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ulcer Index"
          },
          "pain_index": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pain Index"
          },
          "pain_ratio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pain Ratio"
          },
          "omega_ratio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Omega Ratio"
          },
          "avg_drawdown_duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avg Drawdown Duration"
          },
          "max_drawdown_duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Drawdown Duration"
          },
          "volatility": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Volatility"
          },
          "Total P&L": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total P&L"
          },
          "avg_win": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avg Win"
          },
          "avg_loss": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avg Loss"
          },
          "expectancy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expectancy"
          }
        },
        "type": "object",
        "required": [
          "profit",
          "max_drawdown",
          "sharpe_ratio",
          "win_rate",
          "total_trades"
        ],
        "title": "PerformanceMetrics",
        "description": "Schema for backtest performance metrics"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WalkForwardFoldResult": {
        "properties": {
          "fold_number": {
            "type": "integer",
            "title": "Fold Number"
          },
          "in_sample_start_date": {
            "type": "string",
            "format": "date-time",
            "title": "In Sample Start Date"
          },
          "in_sample_end_date": {
            "type": "string",
            "format": "date-time",
            "title": "In Sample End Date"
          },
          "out_of_sample_start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Out Of Sample Start Date"
          },
          "out_of_sample_end_date": {
            "type": "string",
            "format": "date-time",
            "title": "Out Of Sample End Date"
          },
          "optimized_parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Optimized Parameters"
          },
          "out_of_sample_metrics": {
            "$ref": "#/components/schemas/PerformanceMetrics"
          }
        },
        "type": "object",
        "required": [
          "fold_number",
          "in_sample_start_date",
          "in_sample_end_date",
          "out_of_sample_start_date",
          "out_of_sample_end_date",
          "optimized_parameters",
          "out_of_sample_metrics"
        ],
        "title": "WalkForwardFoldResult",
        "description": "Stores the results of a single walk-forward fold."
      },
      "WalkForwardRequest": {
        "properties": {
          "strategy_name": {
            "type": "string",
            "title": "Strategy Name"
          },
          "parameter_ranges": {
            "items": {
              "$ref": "#/components/schemas/ParameterRange"
            },
            "type": "array",
            "title": "Parameter Ranges"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "timeframe": {
            "type": "string",
            "title": "Timeframe"
          },
          "total_start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Total Start Date"
          },
          "total_end_date": {
            "type": "string",
            "format": "date-time",
            "title": "Total End Date"
          },
          "in_sample_period_days": {
            "type": "integer",
            "title": "In Sample Period Days"
          },
          "out_of_sample_period_days": {
            "type": "integer",
            "title": "Out Of Sample Period Days"
          },
          "num_folds": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Folds"
          }
        },
        "type": "object",
        "required": [
          "strategy_name",
          "parameter_ranges",
          "symbol",
          "timeframe",
          "total_start_date",
          "total_end_date",
          "in_sample_period_days",
          "out_of_sample_period_days"
        ],
        "title": "WalkForwardRequest",
        "description": "Request schema for starting a walk-forward testing task."
      },
      "WalkForwardResponse": {
        "properties": {
          "walk_forward_id": {
            "type": "string",
            "title": "Walk Forward Id"
          },
          "strategy_name": {
            "type": "string",
            "title": "Strategy Name"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "timeframe": {
            "type": "string",
            "title": "Timeframe"
          },
          "total_start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Total Start Date"
          },
          "total_end_date": {
            "type": "string",
            "format": "date-time",
            "title": "Total End Date"
          },
          "in_sample_period_days": {
            "type": "integer",
            "title": "In Sample Period Days"
          },
          "out_of_sample_period_days": {
            "type": "integer",
            "title": "Out Of Sample Period Days"
          },
          "num_folds": {
            "type": "integer",
            "title": "Num Folds"
          },
          "fold_results": {
            "items": {
              "$ref": "#/components/schemas/WalkForwardFoldResult"
            },
            "type": "array",
            "title": "Fold Results"
          },
          "aggregated_out_of_sample_metrics": {
            "$ref": "#/components/schemas/PerformanceMetrics"
          }
        },
        "type": "object",
        "required": [
          "walk_forward_id",
          "strategy_name",
          "symbol",
          "timeframe",
          "total_start_date",
          "total_end_date",
          "in_sample_period_days",
          "out_of_sample_period_days",
          "num_folds",
          "fold_results",
          "aggregated_out_of_sample_metrics"
        ],
        "title": "WalkForwardResponse",
        "description": "Response schema for the walk-forward testing task."
      }
    }
  }
}