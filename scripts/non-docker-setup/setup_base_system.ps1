# Cryptobot Base System Setup Script for Windows
# This script installs the necessary system dependencies for the Cryptobot application

# Function to display messages
function Log {
    param (
        [string]$Message
    )
    Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $Message"
}

# Check if running as administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Log "Error: This script must be run as Administrator. Please restart PowerShell as Administrator and try again."
    exit 1
}

Log "Starting Cryptobot base system setup for Windows..."

# Create necessary directories
Log "Creating necessary directories..."
New-Item -ItemType Directory -Force -Path "logs" | Out-Null
New-Item -ItemType Directory -Force -Path "data" | Out-Null
New-Item -ItemType Directory -Force -Path "config" | Out-Null

# Check if Chocolatey is installed
Log "Checking for Chocolatey package manager..."
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    Log "Installing Chocolatey package manager..."
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    
    # Refresh environment variables
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
} else {
    Log "Chocolatey is already installed."
}

# Install required tools and dependencies
Log "Installing required tools and dependencies..."
choco install -y git curl wget 7zip

# Check if Python is installed
$pythonInstalled = Get-Command python -ErrorAction SilentlyContinue
if (-not $pythonInstalled) {
    Log "Installing Python 3.10..."
    choco install -y python --version=3.10
    
    # Refresh environment variables
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
} else {
    $pythonVersion = python --version
    Log "Python is already installed: $pythonVersion"
}

# Install Visual C++ Build Tools (required for some Python packages)
Log "Installing Visual C++ Build Tools..."
choco install -y visualstudio2019buildtools visualstudio2019-workload-vctools

# Create a .env file with basic configuration
Log "Creating basic .env configuration file..."
$envContent = @"
# Cryptobot Environment Configuration
# Generated by setup_base_system.ps1

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_USER=cryptobot
DB_PASSWORD=changeme
DB_NAME=cryptobot

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Service Ports
AUTH_SERVICE_PORT=8000
STRATEGY_SERVICE_PORT=8010
BACKTEST_SERVICE_PORT=8020
TRADE_SERVICE_PORT=8030
DATA_SERVICE_PORT=8001

# Full Database URL (for SQLAlchemy, assuming asyncpg driver)
DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

# Logging
LOG_LEVEL=INFO
LOG_DIR=./logs
"@

Set-Content -Path ".env" -Value $envContent

Log "Base system setup completed successfully!"
Log "Next steps:"
Log "1. Run setup_database.ps1 to install and configure PostgreSQL"
Log "2. Run setup_redis.ps1 to install and configure Redis"
Log "3. Run setup_python_env.ps1 to set up the Python environment"
Log "4. Run setup_environment.ps1 to complete the setup process"

exit 0