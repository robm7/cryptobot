#!/bin/bash
# Cryptobot Base System Setup Script for Linux/macOS
# This script installs the necessary system dependencies for the Cryptobot application

set -e  # Exit immediately if a command exits with a non-zero status

# Function to display messages
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Detect OS
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
    log "Detected Linux operating system"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
    log "Detected macOS operating system"
else
    log "Error: Unsupported operating system. This script is for Linux and macOS only."
    exit 1
fi

# Create necessary directories
log "Creating necessary directories..."
mkdir -p logs
mkdir -p data
mkdir -p config

# Install system dependencies based on OS
if [[ "$OS" == "linux" ]]; then
    log "Installing system dependencies for Linux..."
    
    # Detect package manager
    if command_exists apt-get; then
        log "Using apt package manager"
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev \
            python3-pip python3-venv git curl wget net-tools
    elif command_exists yum; then
        log "Using yum package manager"
        sudo yum update -y
        sudo yum install -y gcc openssl-devel bzip2-devel libffi-devel python3-devel \
            python3-pip git curl wget net-tools
    elif command_exists dnf; then
        log "Using dnf package manager"
        sudo dnf update -y
        sudo dnf install -y gcc openssl-devel bzip2-devel libffi-devel python3-devel \
            python3-pip git curl wget net-tools
    elif command_exists pacman; then
        log "Using pacman package manager"
        sudo pacman -Syu --noconfirm
        sudo pacman -S --noconfirm base-devel openssl libffi python python-pip git curl wget net-tools
    else
        log "Error: Unsupported package manager. Please install the required dependencies manually."
        exit 1
    fi
    
elif [[ "$OS" == "macos" ]]; then
    log "Installing system dependencies for macOS..."
    
    # Check if Homebrew is installed
    if ! command_exists brew; then
        log "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        log "Homebrew already installed, updating..."
        brew update
    fi
    
    # Install dependencies using Homebrew
    brew install python3 git curl wget openssl
fi

# Create a .env file with basic configuration
log "Creating basic .env configuration file..."
cat > .env << EOL
# Cryptobot Environment Configuration
# Generated by setup_base_system.sh

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_USER=cryptobot
DB_PASSWORD=changeme
DB_NAME=cryptobot

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Service Ports
AUTH_SERVICE_PORT=8000
STRATEGY_SERVICE_PORT=8010
BACKTEST_SERVICE_PORT=8020
TRADE_SERVICE_PORT=8030
DATA_SERVICE_PORT=8001

# Logging
LOG_LEVEL=INFO
LOG_DIR=./logs
EOL

log "Base system setup completed successfully!"
log "Next steps:"
log "1. Run setup_database.sh to install and configure PostgreSQL"
log "2. Run setup_redis.sh to install and configure Redis"
log "3. Run setup_python_env.sh to set up the Python environment"
log "4. Run setup_environment.sh to complete the setup process"

exit 0